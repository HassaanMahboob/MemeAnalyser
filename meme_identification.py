# -*- coding: utf-8 -*-
"""Meme_classification.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1E5jeqHBQj_qkAsCPZTa8VyEQr1Kcovu4

"""

from os import listdir
import os
from pickle import dump
import numpy as np
import cv2 
import pandas as pd
from keras.applications.inception_resnet_v2 import InceptionResNetV2
from keras.preprocessing.image import load_img
from keras.preprocessing.image import img_to_array
from keras.applications.inception_resnet_v2 import preprocess_input
from keras.models import Model


def init_model():  
  model = InceptionResNetV2()
  model.layers.pop()
  model = Model(inputs = model.inputs , outputs = model.layers[-1].output)
  return model



def update_memes_db(model):
  features = dict()
  directory = os.getcwd()
  directory = os.path.join(directory, "meme_dataset")
  print(directory)
  for name in listdir(directory):
      filename = os.path.join(directory, name)
      try:
        image = load_img(filename , target_size=(299 , 299))
        
        image = img_to_array(image)
        
        image = image.reshape((1 , image.shape[0] , image.shape[1] ,image.shape[2]))
        
        image = preprocess_input(image)
        
        feature = model.predict(image , verbose = 0)
        
        # get image id
        image_id = name.split(".")[0]
        
        # store features
        features[image_id] = feature
        
        print(name)
      except:
         print(name,"ERROR: while reading")
  import pickle
  dbfile = open('Data/features_db.p', 'ab')
  pickle.dump(features, dbfile)                     
  dbfile.close()
  return features


def load_memes_db():
  import pickle
  dbfile = open('Data/features_db.p', 'rb')
  features = pickle.load(dbfile)                     
  dbfile.close()
  return features



def is_meme(imgpath, features, model):

  image = load_img(imgpath , target_size=(299,299))

  image = img_to_array(image)

  image = image.reshape((1,image.shape[0],image.shape[1],image.shape[2]))

  image = preprocess_input(image)

  feature = model.predict(image , verbose = 0)

  from scipy.spatial import distance

  distances = dict()
  for value in features:
    dist = distance.correlation(features[value],feature)
    distances[value]=dist 
  min_dist = min(list(distances.values()))
  if min_dist>0.09:
    # for i in distances:
    #   if distances[i]==min_dist:
    #     print(i)
    # print(min_dist)
    return 0
  else:
    # for i in distances:
    #   if distances[i]==min_dist:
    #     print(i)
    # print(min_dist)
    return 1


if __name__ == "__main__":

  model = init_model()

  #meme_db = update_memes_db(model)

  meme_db = load_memes_db()
  
  result = is_meme("not_m2.jpeg", meme_db, model)

  if result==1:
    print("It is a meme.")
  else:
    print("It is not a meme.")
